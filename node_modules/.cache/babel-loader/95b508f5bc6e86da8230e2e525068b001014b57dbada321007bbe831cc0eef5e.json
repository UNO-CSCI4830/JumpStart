{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fritz\\\\Desktop\\\\JumpStart\\\\src\\\\components\\\\AdvicePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Sidebar from \"./AdviceSidebar\";\nimport Content from \"./AdviceContent\";\nimport AdviceShareModal from \"./AdviceShareModal\";\nimport { advicePosts } from \"../utils/advicePosts\";\nimport \"../styles/Content.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Advice() {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [filteredPosts, setFilteredPosts] = useState(advicePosts);\n  const [activeTag, setActiveTag] = useState(\"Study tips\"); // Default active tag\n  const [sortCriteria, setSortCriteria] = useState(\"mostRecent\"); // Default sorting criteria\n\n  const handleOpenModal = () => setIsModalOpen(true);\n  const handleCloseModal = () => setIsModalOpen(false);\n  const handleFilterChange = tag => {\n    const filtered = advicePosts.filter(post => post.tag === tag);\n    setFilteredPosts(filtered);\n    setActiveTag(tag); // Update active tag\n  };\n  const handleSortChange = criteria => {\n    setSortCriteria(criteria);\n    let sortedPosts;\n    if (criteria === \"mostRecent\") {\n      sortedPosts = [...filteredPosts].sort((a, b) => {\n        const timeA = parseTimeAgo(a.timeAgo);\n        const timeB = parseTimeAgo(b.timeAgo);\n        return timeB - timeA; // Sort in descending order\n      });\n    } else if (criteria === \"mostLiked\") {\n      sortedPosts = [...filteredPosts].sort((a, b) => b.likes - a.likes);\n    } else if (criteria === \"mostHearted\") {\n      sortedPosts = [...filteredPosts].sort((a, b) => b.hearts - a.hearts);\n    }\n    setFilteredPosts(sortedPosts);\n  };\n\n  // Helper function to parse timeAgo string into a timestamp\n  const parseTimeAgo = timeAgo => {\n    const timeParts = timeAgo.split(\" \");\n    const timeValue = parseInt(timeParts[0], 10);\n    const timeUnit = timeParts[1];\n    let milliseconds = 0;\n    if (timeUnit.startsWith(\"hr\")) {\n      milliseconds = timeValue * 60 * 60 * 1000; // Convert hours to milliseconds\n    } else if (timeUnit.startsWith(\"min\")) {\n      milliseconds = timeValue * 60 * 1000; // Convert minutes to milliseconds\n    } else if (timeUnit.startsWith(\"sec\")) {\n      milliseconds = timeValue * 1000; // Convert seconds to milliseconds\n    }\n    return Date.now() - milliseconds; // Return the timestamp for comparison\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"advice-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onShareClick: handleOpenModal,\n      onFilterChange: handleFilterChange,\n      activeTag: activeTag,\n      allPosts: advicePosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      posts: filteredPosts,\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(AdviceShareModal, {\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Advice, \"KOntaPxg4rcU6J8Jtmkilmuny4I=\");\n_c = Advice;\nvar _c;\n$RefreshReg$(_c, \"Advice\");","map":{"version":3,"names":["React","useState","Sidebar","Content","AdviceShareModal","advicePosts","jsxDEV","_jsxDEV","Advice","_s","isModalOpen","setIsModalOpen","filteredPosts","setFilteredPosts","activeTag","setActiveTag","sortCriteria","setSortCriteria","handleOpenModal","handleCloseModal","handleFilterChange","tag","filtered","filter","post","handleSortChange","criteria","sortedPosts","sort","a","b","timeA","parseTimeAgo","timeAgo","timeB","likes","hearts","timeParts","split","timeValue","parseInt","timeUnit","milliseconds","startsWith","Date","now","className","children","onShareClick","onFilterChange","allPosts","fileName","_jsxFileName","lineNumber","columnNumber","posts","onSortChange","onClose","_c","$RefreshReg$"],"sources":["C:/Users/fritz/Desktop/JumpStart/src/components/AdvicePage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Sidebar from \"./AdviceSidebar\";\r\nimport Content from \"./AdviceContent\";\r\nimport AdviceShareModal from \"./AdviceShareModal\";\r\nimport { advicePosts } from \"../utils/advicePosts\";\r\nimport \"../styles/Content.css\";\r\n\r\nexport default function Advice() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [filteredPosts, setFilteredPosts] = useState(advicePosts);\r\n  const [activeTag, setActiveTag] = useState(\"Study tips\"); // Default active tag\r\n  const [sortCriteria, setSortCriteria] = useState(\"mostRecent\"); // Default sorting criteria\r\n\r\n  const handleOpenModal = () => setIsModalOpen(true);\r\n  const handleCloseModal = () => setIsModalOpen(false);\r\n\r\n  const handleFilterChange = (tag) => {\r\n    const filtered = advicePosts.filter((post) => post.tag === tag);\r\n    setFilteredPosts(filtered);\r\n    setActiveTag(tag); // Update active tag\r\n  };\r\n\r\n  const handleSortChange = (criteria) => {\r\n    setSortCriteria(criteria);\r\n    let sortedPosts;\r\n\r\n    if (criteria === \"mostRecent\") {\r\n      sortedPosts = [...filteredPosts].sort((a, b) => {\r\n        const timeA = parseTimeAgo(a.timeAgo);\r\n        const timeB = parseTimeAgo(b.timeAgo);\r\n        return timeB - timeA; // Sort in descending order\r\n      });\r\n    } else if (criteria === \"mostLiked\") {\r\n      sortedPosts = [...filteredPosts].sort((a, b) => b.likes - a.likes);\r\n    } else if (criteria === \"mostHearted\") {\r\n      sortedPosts = [...filteredPosts].sort((a, b) => b.hearts - a.hearts);\r\n    }\r\n\r\n    setFilteredPosts(sortedPosts);\r\n  };\r\n\r\n  // Helper function to parse timeAgo string into a timestamp\r\n  const parseTimeAgo = (timeAgo) => {\r\n    const timeParts = timeAgo.split(\" \");\r\n    const timeValue = parseInt(timeParts[0], 10);\r\n    const timeUnit = timeParts[1];\r\n\r\n    let milliseconds = 0;\r\n\r\n    if (timeUnit.startsWith(\"hr\")) {\r\n      milliseconds = timeValue * 60 * 60 * 1000; // Convert hours to milliseconds\r\n    } else if (timeUnit.startsWith(\"min\")) {\r\n      milliseconds = timeValue * 60 * 1000; // Convert minutes to milliseconds\r\n    } else if (timeUnit.startsWith(\"sec\")) {\r\n      milliseconds = timeValue * 1000; // Convert seconds to milliseconds\r\n    }\r\n\r\n    return Date.now() - milliseconds; // Return the timestamp for comparison\r\n  };\r\n\r\n  return (\r\n    <div className=\"advice-container\">\r\n      <Sidebar\r\n        onShareClick={handleOpenModal}\r\n        onFilterChange={handleFilterChange}\r\n        activeTag={activeTag}\r\n        allPosts={advicePosts}\r\n      />\r\n      <Content posts={filteredPosts} onSortChange={handleSortChange} />\r\n      {isModalOpen && <AdviceShareModal onClose={handleCloseModal} />}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}