{"ast":null,"code":"var _jsxFileName = \"/home/sdj81/ReactWorkspace/react_demo/src/TODO.js\";\nimport './MyCustom.css';\nimport { tasks } from './tasks.js';\n/*\n * TODO:\n * - Build TODO Component\n * - Re-fromat what I have Into the following structure:\n *\n *     <Navigation /> \n *     <TODO />\n *\n *     <App />\n *       <Intro /> \n *       <Search />\n *       <Post />\n *       <Results />\n *\n *     <Footer />\n *       <AboutUs />\n *       <ContactUs />\n *\n * - Build Search and Post demo\n *   - Basically, whatever's entered gets re-printed to screen in Results component\n * - Figure out how to structure data that will be searched, related, and stored\n *   - SQL???\n *   - data.js??\n *\n * - What about a utils.js?\n *   - Guessing this is where I put my custom functions that are wholly Universal\n *\n */\n\n// can display lists by using the map() function\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ItemList({\n  things,\n  emptyHeading\n}) {\n  const count = things.length;\n  let heading = emptyHeading;\n  if (count > 0) {\n    const noun = count > 1 ? 'Things:' : 'Thing:';\n    heading = count + ' ' + noun;\n  }\n  /* Any arrow functions => {} REQUIRE a return statement, since it implies more than one line of code\n  * Otherwise, one line is implicit and does not NEED a return\n  *\n  * how I can filter complex lists:\n  *  \u001blist.filter(item => item.subItem == \"match\")\n  *\n  * - Must specify a unique key if I want to refer to elements\n  *   - This benefits because orders of list, items to be listed, etc. is assumed random\n  *   - keys must be unique, non-changing\n  *   - key items aren't typically props. Must be passed as a seperate prop:\n  *     <Profile key={id} userID={id} />\n  *\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: things.map(thing => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: thing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_c = ItemList;\nexport default function Todo() {\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task.desc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TODO\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"// TODO:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" A small list of functional and UI stuff to get our website working\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: taskList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c2 = Todo;\nvar _c, _c2;\n$RefreshReg$(_c, \"ItemList\");\n$RefreshReg$(_c2, \"Todo\");","map":{"version":3,"names":["tasks","jsxDEV","_jsxDEV","Fragment","_Fragment","ItemList","things","emptyHeading","count","length","heading","noun","children","fileName","_jsxFileName","lineNumber","columnNumber","map","thing","_c","Todo","taskList","task","name","desc","className","_c2","$RefreshReg$"],"sources":["/home/sdj81/ReactWorkspace/react_demo/src/TODO.js"],"sourcesContent":["import './MyCustom.css';\nimport {tasks} from './tasks.js'\n/*\n * TODO:\n * - Build TODO Component\n * - Re-fromat what I have Into the following structure:\n *\n *     <Navigation /> \n *     <TODO />\n *\n *     <App />\n *       <Intro /> \n *       <Search />\n *       <Post />\n *       <Results />\n *\n *     <Footer />\n *       <AboutUs />\n *       <ContactUs />\n *\n * - Build Search and Post demo\n *   - Basically, whatever's entered gets re-printed to screen in Results component\n * - Figure out how to structure data that will be searched, related, and stored\n *   - SQL???\n *   - data.js??\n *\n * - What about a utils.js?\n *   - Guessing this is where I put my custom functions that are wholly Universal\n *\n */\n\n// can display lists by using the map() function\nfunction ItemList({things, emptyHeading}) {\n    const count = things.length;\n    let heading = emptyHeading;\n    if (count > 0) {\n        const noun = count > 1 ? 'Things:' : 'Thing:';\n        heading = count + ' ' + noun;\n    }\n    /* Any arrow functions => {} REQUIRE a return statement, since it implies more than one line of code\n    * Otherwise, one line is implicit and does not NEED a return\n    *\n    * how I can filter complex lists:\n    *  \u001blist.filter(item => item.subItem == \"match\")\n    *\n    * - Must specify a unique key if I want to refer to elements\n    *   - This benefits because orders of list, items to be listed, etc. is assumed random\n    *   - keys must be unique, non-changing\n    *   - key items aren't typically props. Must be passed as a seperate prop:\n    *     <Profile key={id} userID={id} />\n    *\n    */\n    return (\n        <div>\n            <h2>{heading}</h2>\n            <ol>\n                {things.map(thing => \n                    <li>{thing}</li>\n                )}\n            </ol>\n        </div>\n    );\n}\n\n\nexport default function Todo() {\n    const taskList = tasks.map(task =>\n        <li>\n            <b>{task.name}</b>\n            <p>{task.desc}</p>\n        </li>\n    )\n    return (\n        <>\n            <div className=\"TODO\">\n                <h1>// TODO:</h1>\n                <p> A small list of functional and UI stuff to get our website working</p>\n                <ul>\n                    {taskList}\n                </ul>\n            </div>\n        </>\n    )\n}\n\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,SAAQA,KAAK,QAAO,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,QAAQA,CAAC;EAACC,MAAM;EAAEC;AAAY,CAAC,EAAE;EACtC,MAAMC,KAAK,GAAGF,MAAM,CAACG,MAAM;EAC3B,IAAIC,OAAO,GAAGH,YAAY;EAC1B,IAAIC,KAAK,GAAG,CAAC,EAAE;IACX,MAAMG,IAAI,GAAGH,KAAK,GAAG,CAAC,GAAG,SAAS,GAAG,QAAQ;IAC7CE,OAAO,GAAGF,KAAK,GAAG,GAAG,GAAGG,IAAI;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,oBACIT,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAKF;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBd,OAAA;MAAAU,QAAA,EACKN,MAAM,CAACW,GAAG,CAACC,KAAK,iBACbhB,OAAA;QAAAU,QAAA,EAAKM;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACG,EAAA,GA9BQd,QAAQ;AAiCjB,eAAe,SAASe,IAAIA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAGrB,KAAK,CAACiB,GAAG,CAACK,IAAI,iBAC3BpB,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAIU,IAAI,CAACC;IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBd,OAAA;MAAAU,QAAA,EAAIU,IAAI,CAACE;IAAI;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CACR,CAAC;EACD,oBACId,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACIV,OAAA;MAAKuB,SAAS,EAAC,MAAM;MAAAb,QAAA,gBACjBV,OAAA;QAAAU,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBd,OAAA;QAAAU,QAAA,EAAG;MAAmE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1Ed,OAAA;QAAAU,QAAA,EACKS;MAAQ;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC,gBACR,CAAC;AAEX;AAACU,GAAA,GAlBuBN,IAAI;AAAA,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}